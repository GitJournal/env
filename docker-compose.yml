version: "3.9"

networks:
  web:
    external: true
  internal:
    external: true
  default:
    external: true
    name: internal

services:
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./data/caddy/data:/data
      - ./data/caddy/config:/config
      - ./data/app-store-review-feed:/app-store-review-feed/
    networks:
      - web
      - internal

  postgres:
    image: supabase/postgres:13.3.0
    container_name: postgres
    restart: unless-stopped
    env_file:
      - secrets/postgres.env
    environment:
      - POSTGRES_HOST_AUTH_METHOD=md5
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  clickhouse:
    image: yandex/clickhouse-server:21.3.2.5
    container_name: clickhouse
    restart: unless-stopped
    volumes:
      - ./data/clickhouse:/var/lib/clickhouse
      - ./clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.d/logging.xml:ro
      - ./clickhouse/clickhouse-user-config.xml:/etc/clickhouse-server/users.d/logging.xml:ro
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  plausible:
    image: plausible/analytics:v1.5.1
    container_name: plausible
    restart: unless-stopped
    command: sh -c "sleep 10 && /entrypoint.sh db createdb && /entrypoint.sh db migrate && /entrypoint.sh db init-admin && /entrypoint.sh run"
    depends_on:
      - postgres
      - clickhouse
    env_file:
      - plausible/plausible.env
      - secrets/plausible.env

  # Used by plausible
  mail:
    image: bytemark/smtp
    restart: unless-stopped

  #listmonk:
  #  image: listmonk/listmonk:v2.0.0
  #  container_name: listmonk
  #  restart: unless-stopped
  #  volumes:
  #    - ./secrets/listmonk.config.toml/:/listmonk/config.toml
  #  depends_on:
  #    - postgres

  # listmonk_install:
  #   image: listmonk/listmonk:v2.0.0
  #   command: ["sh", "-c", "yes | ./listmonk --install"]
  #   ports:
  #     - "9000:9000"
  #   volumes:
  #     - ./secrets/listmonk.config.toml/:/listmonk/config.toml

  # listmonk_upgrade:
  #   image: listmonk/listmonk:v2.0.0
  #   command: ["sh", "-c", "yes | ./listmonk --upgrade"]
  #   ports:
  #     - "9000:9000"
  #   volumes:
  #     - ./secrets/listmonk.config.toml/:/listmonk/config.toml

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./data/prometheus:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    depends_on:
      - cadvisor

  node-exporter:
    image: prom/node-exporter
    container_name: prom_node_exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"

  alertmanager:
    image: prom/alertmanager
    container_name: prom_alertmanager
    restart: unless-stopped
    volumes:
      - "./alertmanager/:/etc/alertmanager/"
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: prom_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  grafana:
    image: grafana/grafana:8.2.0
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    env_file:
      - ./grafana/config.env
      - ./secrets/grafana.env
    user: "472"

  loki:
    image: grafana/loki:2.3.0
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config.yaml:/etc/loki/config.yaml
      - ./data/loki:/data/
    ports:
      - "127.0.0.1:3100:3100" # Docker logging

  promtail:
    image: grafana/promtail:2.3.0
    restart: unless-stopped
    depends_on:
      - loki
    volumes:
      - /var/log:/var/log:ro
      - /run/log/journal:/run/log/journal:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /etc/machine-id:/etc/machine-id:ro
      - ./promtail:/etc/promtail-config:ro
      - ./data/promtail:/data/
    command: -config.file=/etc/promtail/config.yml

  # app-store-reviews:
  #   image: ghcr.io/gitjournal/app-store-review-feed
  #   container_name: app-store-review-feed
  #   restart: unless-stopped
  #   volumes:
  #     - ./data/app-store-review-feed/:/data

  # app-store-reviews-feed-converter:
  #   build: feed-converter
  #   container_name: app-store-review-feed-converter
  #   restart: unless-stopped
  #   volumes:
  #     - ./data/app-store-review-feed/:/data

  analytics:
    image: ghcr.io/gitjournal/analytics_backend:latest
    container_name: analytics
    restart: unless-stopped
    depends_on:
      - postgres
    env_file:
      - ./secrets/postgres.env
